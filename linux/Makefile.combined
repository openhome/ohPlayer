# Makefile

#
# Command Line Options:
#   DEBUG=0: Debug build.
#            Glibc mtrace will be enabled. MALLOC_TRACE must be defined in the
#            environment to activate.
#   NVWA_DIR=<source location>:
#            Integrate a cross platform new/delete leak detector.
#            Downloadable from http://wyw.dcweb.cn/leakage.htm
#

.PHONY: default all clean build install uninstall

HWPLATFORM=$(shell uname -i)

default: ubuntu raspbian
all: default

# set target-specific variables fro ubuntu and raspbian
ubuntu: OSPLATFORM=ubuntu
ubuntu: build


raspbian: OSPLATFORM=raspbian
raspbian: build

$(OBJ_DIR)/%.o: %.cpp $(HEADERS)
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

.PRECIOUS: $(TARGET) $(OBJECTS)

$(TARGET): $(OBJECTS)
	$(CC) $(OBJECTS) -Wall -Wno-deprecated $(LIBS) -o $@

build: $(TARGET)
    # GTK Specifics
    GTK_CFLAGS := $(shell pkg-config --cflags gtk+-3.0)
    GTK_LIBS   := $(shell pkg-config --libs gtk+-3.0)

    $(error OS platform is [$(OSPLATFORM)])

    TARGET    = openhome-player

    INSTALL      = install
    RESOURCEDIR  = ../dependencies/$(TARG_ARCH)/ohMediaPlayer/res

    PREFIX = /usr

    # The directory to install the application to
    BINDIR = $(PREFIX)/bin

    # The directory to install the resource files to.
    RESDIR = $(PREFIX)/share/openhome-player

    CFLAGS = -c -Wall -std=c++11 $(GTK_CFLAGS) -Wno-deprecated

    ifeq ($(OSPLATFORM),ubuntu)
        # indicate to build that we have selected a valid target
        ifneq ($(HWPLATFORM),i686)
            $(error please build on an x86 Ubunutu machine)
        else
            CC          = g++
            TARG_ARCH   = $(TARG_ARCH)
        endif
    else ifeq ($(OSPLATFORM),raspbian)
        ifeq ($(HWPLATFORM),i686)
            CC          = arm-linux-gnueabihf-g++
            TARG_ARCH   = Linux-armhf
        else
            CC          = g++
            TARG_ARCH   = $(TARG_ARCH)
        endif
    endif

    ifdef DEBUG
        BUILD_TYPE = DEBUG
        OBJ_DIR = debug-objs
        CFLAGS += -g -O0 -DDEBUG -fstack-protector
    else
        BUILD_TYPE = Release
        OBJ_DIR   = objs
    endif

    LIBS         = $(GTK_LIBS) -lnotify -lasound -lSourcePlaylist -lSourceSongcast -lSourceUpnpAv -lohMediaPlayer -lWebAppFramework -lConfigUi -lShell -lohNetCore  -lCodecAdts -lCodecAac -lCodecAacBase -lCodecAifc -lCodecAlac -lCodecAlacBase -lCodecPcm -lCodecAiff -lCodecAiffBase -lCodecVorbis -llibOgg -lCodecFlac -lCodecWav -lohPipeline -lpthread -lssl -lcrypto -ldl
    INCLUDES     = -I../dependencies/$(TARG_ARCH)/ohMediaPlayer/include -I../dependencies/$(TARG_ARCH)/ohNetmon/include -I../dependencies/$(TARG_ARCH)/openssl/include -I../dependencies/$(TARG_ARCH)/ohNetGenerated-$(TARG_ARCH)-Release/include/ohnet/OpenHome/Net/Core

    # If 'DEBUG=0 is specified on the command line build a debug biuld.

    LIBS += -L../dependencies/$(TARG_ARCH)/ohMediaPlayer/lib -L../dependencies/$(TARG_ARCH)/ohNetmon/lib -L../dependencies/$(TARG_ARCH)/openssl/lib

    LIBS     += -L../dependencies/$(TARG_ARCH)/ohNet-$(TARG_ARCH)-$(BUILD_TYPE)/lib
    INCLUDES += -I../dependencies/$(TARG_ARCH)/ohNet-$(TARG_ARCH)-$(BUILD_TYPE)/include/ohnet

    OBJECTS  = $(patsubst %.cpp, $(OBJ_DIR)/%.o, $(wildcard *.cpp))
    HEADERS  = $(wildcard *.h)

    ifdef NVWA_DIR
    # Include the new/delete leak checker in debug builds.
    OBJECTS += $(NVWA_DIR)/debug_new.o
    endif

    ifdef NVWA_DIR
    # New/Delete leak checker, if available.
    CFLAGS   += -DUSE_NVWA
    INCLUDES += -I$(NVWA_DIR)
    HEADERS  += $(wildcard $(NVWA_DIR)/*.h)
    endif

   	@mkdir -p $(OBJ_DIR)

clean:
	rm -rf $(OBJ_DIR) $(OBJ_DIR)
	rm -f $(TARGET)
ifdef NVWA_DIR
	rm $(NVWA_DIR)/*.o
endif

install:
	$(INSTALL) -m 755 -d $(DESTDIR)$(BINDIR) $(DESTDIR)$(RESDIR) $(DESTDIR)$(RESDIR)/res
	$(INSTALL) -m 755 $(TARGET) $(DESTDIR)$(BINDIR)
	$(INSTALL) -m 644 OpenHome-48x48.png $(DESTDIR)$(RESDIR)
	cp -R $(RESOURCEDIR) $(DESTDIR)$(RESDIR)

uninstall:
	rm $(DESTDIR)$(BINDIR)/$(TARGET)
	rm -rf $(DESTDIR)$(RESDIR)
